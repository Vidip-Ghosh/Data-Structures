#include<stdio.h>
#include<stdlib.h>
struct node{
    int data;
    struct node* next;
};
struct node* head;

void insert_beg()
{
    int item;
    struct node* temp;
    temp = (struct node*)malloc(sizeof(struct node*));
    if(temp==NULL)
    {
        printf("List is empty!!!!");
    }
    else
    {
        printf("Enter item to be inserted: ");
        scanf("%d",&item);
        item=temp->data;
        head=temp->next;
        temp=head;
    }
}

void insert_end()
{
    int item;
    struct node *ptr,*temp;
    ptr = (struct node*)malloc(sizeof(struct node*));
    if(ptr==NULL)
    {
        printf("List is empty!!!!");
    }
    else
    {
        printf("Enter item to be inserted: ");
        scanf("%d",&item);
        ptr->data=item;
        if(head==NULL)
        {
            ptr->next=NULL;
            head=ptr;
        }
        else
        {
            temp=head;
            while(temp->next!=NULL)
            {
                temp=temp->next;
            }
            temp->next=ptr;
            ptr=NULL;
        }
    }
}

void display()
{
    struct node* ptr;
    ptr = (struct node*)malloc(sizeof(struct node*));
    ptr=head;
    if(ptr==NULL)
    {
        printf("Empty List\n");
    }
    else
    {
        printf("Displaying Linked List\n");
        while(ptr!=NULL)
        {
            printf("%d->",ptr->data);
            ptr=ptr->next;
        }
    }
}

int main()
{
    int choice;
    while(choice!=4)
    {
        printf("1. Insertion at beginning\n");
        printf("2. Insertion at end\n");
        printf("3. Display\n");
        printf("4. EXIT\n");
        printf("Enter the choice: ");
        scanf("%d",&choice);
        switch(choice)
        {
            case 1:
            insert_beg();
            break;
            
            case 2:
            insert_end();
            break;
            
            case 3:
            display();
            break;
            
            case 4:
            printf("EXIT");
        }
    }
}
