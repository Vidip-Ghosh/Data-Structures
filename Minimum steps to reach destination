#include<iostream>
#include<vector>
#include<climits>
using namespace std;

int solveUtil(int ind,vector<int>& height,vector<int>& dp,int k)
{
    if(ind==0)
    {
        return 0;
    }
    if(dp[ind]!=-1)
    {
        return dp[ind];
    }
    int minSteps=INT_MAX;
    for(int j=1;j<=k;j++)
    {
        if(ind-j>=0)
        {
            int jump=solveUtil(ind-j,height,dp,k) + abs(height[ind] - height[ind-j]);
            minSteps=min(jump,minSteps);
        }
    }
    return dp[ind] = minSteps;
}

int solve(int n,vector<int>& height,int k)
{
    vector<int> dp(n,-1);
    return solveUtil(n-1,height,dp,k);
}

int main()
{
    vector<int> height{30,10,60,10,60,50};
    int k=2;
    int n=height.size();
    vector<int> dp(n,-1);
    cout<<solve(n,height,k);
}
