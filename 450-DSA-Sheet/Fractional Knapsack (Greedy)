#include <bits/stdc++.h>
using namespace std;

struct Item
{
    int weight;
    int value;
};

class Solution
{
    public:
    static bool cmp(pair<double,Item> a,pair<double,Item> b)
    {
        return a.first>b.first;
    }
    
    double fractionalKnapsack(int W,Item arr[],int n)
    {
        vector<pair<double,Item>> v;
        for(int i=0;i<n;i++)
        {
            double perUnitValue = (1.0 * arr[i].value)/arr[i].weight;
            pair<double,Item> p = make_pair(perUnitValue,arr[i]);
            v.push_back(p);
        }
        
        sort(v.begin(),v.end(),cmp);
        
        double totalValue=0;
        for(int i=0;i<n;i++)
        {
            if(v[i].second.weight > W)
            {
                // I'll be taking only fractional value 
                totalValue+=W*v[i].first;
                W=0;
            }
            else
            {
                totalValue+=v[i].second.value;
                W=W-v[i].second.weight;
            }
        }
        return totalValue;
    }
};

int main()
{
    int n,W;
    cout<<"Enter no of elements: ";
    cin>>n;
    
    cout<<"Enter Capacity of knapsack: ";
    cin>>W;
    
    Item arr[n];
    cout<<"Enter array values: "<<endl;
    for(int i=0;i<n;i++)
    {
        cout<<"Array value"<<i;
        cin>>arr[i].value;
        
        cout<<"Weight array value"<<i;
        cin>>arr[i].weight;
    }
    Solution ob;
    cout<<ob.fractionalKnapsack(W,arr,n)<<endl;
}
