//https://practice.geeksforgeeks.org/problems/inversion-of-array-1587115620/1
#include <bits/stdc++.h>
using namespace std;

class Solution{
  public:
    // arr[]: Input Array
    // N : Size of the Array arr[]
    // Function to count inversions in the array.
    
    long long merge(long long arr[],long long low,long long mid,long long high)
    {
        vector<long long> temp;
        long long left=low;
        long long right=mid+1;
        long long cnt=0;
        
        while(left<=mid && right<=high)
        {
            if(arr[left] <= arr[right])
            {
                temp.push_back(arr[left]);
                left++;
            }
            else
            {
                temp.push_back(arr[right]);
                cnt+=(mid-left+1);
                right++;
            }
        }
        
        while(left<=mid)
        {
            temp.push_back(arr[left]);
            left++;
        }
        while(right<=high)
        {
            temp.push_back(arr[right]);
            right++;
        }
        
        for(int i=low;i<=high;i++)
        {
            arr[i] = temp[i-low];
        }
        return cnt;
    }
    
    long long mergeSort(long long arr[],long long low,long long high)
    {
        long long cnt=0;
        if(low>=high)
        {
            return cnt;
        }
        long long mid = (low+high)/2;
        cnt += mergeSort(arr,low,mid);
        cnt += mergeSort(arr,mid+1,high);
        cnt += merge(arr,low,mid,high);
        return cnt;
    }
    
    long long int inversionCount(long long arr[], long long N)
    {
        // Method-1: Brute Force
        // long long int cnt=0;
        // for(int i=0;i<N;i++)
        // {
        //     for(int j=i+1;j<N;j++)
        //     {
        //         if(arr[i] > arr[j] && i<j)
        //         {
        //             cnt++;
        //         }
        //     }
        // }
        // return cnt; //TC --> O(N^2) && SC --> O(1)
        
        return mergeSort(arr,0,N-1);
    }

};

int main() {
    
    long long T;
    cin >> T;
    
    while(T--){
        long long N;
        cin >> N;
        
        long long A[N];
        for(long long i = 0;i<N;i++){
            cin >> A[i];
        }
        Solution obj;
        cout << obj.inversionCount(A,N) << endl;
    }
    
    return 0;
}
