//https://practice.geeksforgeeks.org/problems/maximum-product-subarray3604/1
#include <bits/stdc++.h>
using namespace std;

class Solution{
public:

	//Brute force approach 
    //Time Complexity --> nearly O(N^3) 3 loops	
	long long maxProduct(vector<int> arr, int n) {
	   // long long maxi=INT_MIN;
	   // for(int i=0;i<n;i++)
	   // {
	   //     for(int j=i;j<n;j++)
    //         {
    //             long long prod=1;
    //             for(int k=i;k<j;k++)
    //             {
    //                 prod*=arr[k];
    //             }
    //             maxi=max(prod,maxi);
    //         }    
	   // }
	   // return maxi;
	    
	   //Time Complexity --> O(N^2) 2 loops
	   //long long maxi=INT_MIN;
	   //for(int i=0;i<n;i++)
	   //{
	   //    long long prod=1;
	   //    for(int j=i;j<n;j++)
	   //    {
	   //        prod*=arr[j];
	   //        maxi=max(prod,maxi);
	   //    }
	   //}
	   //return maxi;
	   
	   //Time Complexity --> O(N) 1 loop
	   long long prefix=1, suffix=1;
	   long long maxi=INT_MIN;
	   for(int i=0;i<n;i++)
	   {
	       if(prefix==0)
	       {
	           prefix=1;
	       }
	       if(suffix==0)
	       {
	           suffix=1;
	       }
	       prefix*=arr[i];
	       suffix*=arr[n-i-1];
	       maxi=max(maxi,max(prefix,suffix));
	   }
	   return maxi;
	}
};

int main() {
    int t;
    cin >> t;
    while (t--) {
        int n, i;
        cin >> n;
        vector<int> arr(n);
        for (i = 0; i < n; i++) {
            cin >> arr[i];
        }
        Solution ob;
        auto ans = ob.maxProduct(arr, n);
        cout << ans << "\n";
    }
    return 0;
}
