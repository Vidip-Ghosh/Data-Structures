//CONDITION TO CHECK IF TREE IS UNIVALUED OR NOT
#include<iostream>
using namespace std;
struct Node{
    int data;
    Node* right;
    Node* left;
}

Node* GetNewNode(int data)
{
    Node* temp = new Node;
    temp->data = data;
    temp->right = NULL;
    temp->left = NULL;
    return temp;
}

bool isUnivalued(Node* root)
{
    if(root==NULL)
    {
        return true;
    }
    if(root->right!=NULL && root->data->right!=NULL)
    {
        return false;
    }
    if(root->left!=NULL && root->data->left!=NULL)
    {
        return false;
    }
    return isUnivalued(root->right) && isUnivalued(root->left); 
}

int main()
{
    Node* root = newNode(1);
    root->left = newNode(1);
    root->left->left = newNode(1);
    root->right = newNode(1);
    root->right->right = newNode(1);
    
    if(isUnivalued(root) == 1)
    {
        printf("YES");
    }
    else
    {
        printf("NO");
    }
} 
