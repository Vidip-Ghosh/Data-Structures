//Structure of a tree->
struct Node
{
    int data;
    Node* left;
    Node* right;
};

//Get new node
Node* GetNewNode(int data)
{
    Node* temp = new Node;
    temp->data = data;
    temp->left = temp->right = NULL;
    return temp;
}

//Insert operation
void Insert(Node* root, int data)
{
    if(root==NULL)
    {
        return GetNewNode(data);
    }
    else if(root->data<=data)
    {
        root->left = Insert(root->left,data);
    }
    else
    {
        root->right = Insert(root->right,data);
    }
}

//Searching in BST
Node* Search(Node* root,int data)
{
    if(root->data==data)
    {
         return root;
    }
    else if(root->data<=data)
    {
         return Search(root->left,data);
    }
    else
    {
          return Search(root->right,data);
    }
}

//Height of a Tree
void Height(Node* root)
{
    if(root==NULL)
    {
        return 0;
    }
    else
    {
        int lDepth = Height(root->left);
        int rDepth = Height(root->right);
        if(lDepth>rDepth)
        {
            return lDepth+1;
        }
        else
        {
            return rDepth+1;
        }
    }
}

//Merge 2 binary trees
Node* MergeTrees(Node* root1,Node* root2)
{
      if(root1==NULL && root2==NULL)
      {
           return NULL;
      }
      if(root1==NULL)
      {
           return root2;
      }
      if(root2==NULL)
      {
           return root1;
      }
      root1->data+=root2->data;
      root1->left = MergeTrees(root1->left,root2->left);
      root1->right = MergeTrees(root1->right,root2->right);
      return t1;
}
//Sum of root to leaf paths
int treePathSumUtil(struct Node* root,int val)
{
    if(root==NULL)
    {
        return 0;
    }
    val = (val*10) + root->data;
    if(root->left==NULL && root->right==NULL)
    {
        return val;
    }
    return treePathSumUtil(root->left,val) + treePathSumUtil(root->right,val);
}
int treePathSum(Node* root)
{
    if(root->right!=NULL && root->left!=NULL)
    {
        return treePathSumUtil(root,0);
    }
}

//Check if the trees are at the same level
bool CheckUtil(Node* root,int level,int* leaf_level)
{
    if(root==NULL)
    {
        return true;
    }
    if(root->left==NULL && root->right==NULL)
    {
        //Got the leaf node for the first time
        if(*leaf_level==level)
        {
            *leaf_level = level;
            return true;
        }
        return level == *leaf_level;
    }
    //If this Node is not leaf, recursively check left and right subtrees.
    return CheckUtil(root->left,level+1,leaf_level) && CheckUtil(root->right,level+1,leaf_level);
}

bool Check(Node* root)
{
    int leaf_level=0,level=0;
    CheckUtil(root,level,&leaf_level);
}
