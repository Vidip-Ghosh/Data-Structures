#include <iostream>
#include <queue>
#include <algorithm>
using namespace std;

class heap{
    public:
    int arr[100];
    int size;
    
    heap()
    {
        arr[0] = -1;
        size = 0;
    }
    
    void insert(int val)
    {
        size++;
        int index = size;
        arr[index] = val;
        while(index > 1)
        {
            int parent = index/2;
            if(arr[parent]<arr[index])
            {
                swap(arr[parent],arr[index]);
            }
            else
            {
                return;
            }
        }
    }
    void print()
    {
        for(int i=1;i<=size;i++)
        {
            cout<<arr[i]<<" ";
        }
        cout<<endl;
    }
    void deleteNode()
    {
        if(size==0)
        {
            cout<<"Nothing to delete"<<endl;
            return;
        }
        //step1: put last element into first index
        arr[1] = arr[size];
        
        //step2: remove last element
        size--;
        
        //step3: take root node to its correct position
        int i=1;
        while(i<size)
        {
            int right = 2*i+ 1;
            int left = 2*i;
            if(left<size && arr[i]<arr[left])
            {
                swap(arr[i],arr[left]);
                i = left;
            }
            else if(right<size && arr[i]<arr[right])
            {
                swap(arr[i],arr[right]);
                i = right;
            }
            else
            {
                return;
            }
        }
    }
};

void heapify(int arr[],int n,int i)
{
    int right = 2*i+ 1;
    int left = 2*i;
    int largest = i;
    
    if(left<=n && arr[largest]<arr[left])
    {
        largest = left;
    }
    if(right<=n && arr[largest]<arr[right])
    {
        largest = right;
    }
    if(largest != i)
    {
        swap(arr[largest],arr[i]);
        heapify(arr,n,largest);
    }
}

void heapSort(int arr[],int n)
{
    int size = n;
    while(size>1)
    {
        //step1: swap
        swap(arr[size],arr[1]);
        
        //step2
        size--;
        
        //step3
        heapify(arr,size,1);
    }
}

int main()
{
    heap h;
    h.insert(50);
    h.insert(55);
    h.insert(53);
    h.insert(52);
    h.insert(54);
    h.print();
    
    h.deleteNode();
    h.print();
    
    h.deleteNode();
    h.print();
    
    int arr[6] = {-1,54,53,55,52,50};
    int n=5;
    
    //heap creation
    for(int i=n/2;i>0;i--)
    {
        heapify(arr,n,i);
    }
    cout<<"Printing the array: "<<endl;
    for(int i=1;i<=n;i++)
    {
        cout<<arr[i]<<" ";
    }
    cout<<endl;
    
    heapSort(arr,n);
    
    cout<<"Printing sorted array: "<<endl;
    for(int i=1;i<=n;i++)
    {
        cout<<arr[i]<<" ";
    }
    cout<<endl;
    
    cout<<"Using priority queue: "<<endl;
    //max heap 
    priority_queue<int> pq;
    pq.push(4);
    pq.push(5);
    pq.push(2);
    pq.push(3);
    cout<<"Size of priority queue: "<<pq.size()<<endl;
    cout<<"Top element in the priority queue: "<<pq.top()<<endl;
    pq.pop();
    cout<<"Top element in the priority queue: "<<pq.top()<<endl;
    pq.pop();
    cout<<"Top element in the priority queue: "<<pq.top()<<endl;
    pq.pop();
    cout<<"Top element in the priority queue: "<<pq.top()<<endl;
    
    if(pq.empty())
    {
        cout<<"Priority Queue is empty"<<endl;
    }
    else
    {
        cout<<"Priority Queue is not empty"<<endl;
    }
}
