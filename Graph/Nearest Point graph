#include <iostream>
#include <vector>
#include <queue>
using namespace std;

class Solution{
    public:
    vector<vector<int>> nearest(vector<vector<int>>grid)
    {
        int n = grid.size();
        int m = grid[0].size();
        vector<vector<int>> vis(n,vector<int>(m,0));
        vector<vector<int>> distance(n,vector<int>(m,0));
        queue<pair<pair<int,int>,int>> q;
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if(grid[i][j]==1)
                {
                    q.push({{i,j},0});
                    vis[i][j]=1;
                }
                else
                {
                    vis[i][j]=0;
                }
            }
        }
        int delrow[] = {-1,0,+1,0};
        int delcol[] = {0,+1,0,-1};
        while(!q.empty())
        {
            int row = q.front().first.first;
            int col = q.front().first.second;
            int steps = q.front().second;
            q.pop();
            distance[row][col]=steps;
            for(int i=0;i<4;i++)
            {
                int nrow = row + delrow[i];
                int ncol = col + delcol[i];
                if((nrow>=0 && nrow<n) && (ncol>=0 && ncol<m) && vis[nrow][ncol]!=1)
                {
                    vis[nrow][ncol]=1;
                    q.push({{nrow,ncol},steps+1});
                }
            }
        }
        return distance;
    }
};

int main()
{
    int n,m;
    cout<<"Enter no of rows and columns: ";
    cin>>n>>m;
    vector<vector<int>>grid(n,vector<int>(m,-1));
    cout<<"Enter matrix elements: "<<endl;
    for(int i=0;i<n;i++)
    {
        for(int j=0;j<m;j++)
        {
            cin>>grid[i][j];
        }
    }
    Solution obj;
    vector<vector<int>>ans = obj.nearest(grid);
    cout<<"Ans is: "<<endl;
    for(auto i: ans)
    {
        for(auto j: i)
        {
            cout<<j<<" ";
        }
        cout<<endl;
    }
}
