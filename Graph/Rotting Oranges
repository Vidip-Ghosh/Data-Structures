#include <iostream>
#include <vector>
#include <queue>
using namespace std;

class Solution
{
    public:
    int orangesRotting(vector<vector<int>> &grid)
    {
        int n = grid.size(), m = grid[0].size();
        queue<pair<pair<int,int>,int>> q;
        int vis[n][m];
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if(grid[i][j]==2)
                {
                    q.push({{i,j},0});
                    vis[i][j]=2;
                }
                else
                {
                    vis[i][j]=0;
                }
            }
        }
        int timeTaken=0;
        int delRow[] = {-1,0,+1,0};
        int delCol[] = {0,+1,0,-1};
        
        while(!q.empty())
        {
            int r = q.front().first.first;
            int c = q.front().first.second;
            int t = q.front().second;
            timeTaken=max(timeTaken,t);
            q.pop();
            for(int i=0;i<4;i++)
            {
                int nrow = r + delRow[i];
                int ncol = c + delCol[i];
                if((nrow>=0 && nrow<n) && (ncol>=0 && ncol<m) && vis[nrow][ncol]!=2 && grid[nrow][ncol]==1)
                {
                    q.push({{r,c},t+1});
                    vis[nrow][ncol]=2;
                }
            }
        }
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if(vis[i][j]!=2 && grid[i][j]==1)
                {
                    return -1;
                }
            }
        }
        return timeTaken;
    }
};

int main()
{
    int n,m;
    cout<<"Enter no of rows and columns: ";
    cin>>n>>m;
    vector<vector<int>> grid(n,vector<int>(m,-1));
    
    cout<<"Enter the elements of a graph: "<<endl;
    for(int i=0;i<n;i++)
    {
        for(int j=0;j<m;j++)
        {
            cin>>grid[i][j];
        }
    }
    Solution obj;
    int ans = obj.orangesRotting(grid);
    cout<<ans<<" ";
}
