#include <iostream>
using namespace std;

class Node
{
    public:
    int data;
    Node* next;
};

void beginInsert(Node* &head,int x)
{
    Node* temp = new Node;
    if(temp == NULL)
    {
        cout<<"OVERFLOW\n";
    }
    temp->data = x;
    temp->next = head;
    head = temp;
}

void insertAtAnyPosition(Node* &head,int x,int pos)
{
    Node* temp;     //temp contains the address of next node 
    Node* curr = head;
    
    if(temp == NULL)
    {
        cout<<"OVERFLOW"<<endl;
    }
    cout<<"Enter the value to be inserted: ";
    cin>>x;
    cout<<"Enter the position of an element: ";
    cin>>pos;
    temp->data = x;
    for(int i=0;i<pos;i++)
    {
        curr = curr->next;
        if(curr == NULL)
        {
            cout<<"Can't insert"<<endl;
            return;
        }
    }
    temp->next = curr->next;
    curr->next = temp;
}

Node* reverseLinkedList(Node* &head)
{
    Node* prevPtr = NULL;
    Node* currPtr = head;
    Node* nextPtr;
    
    while(currPtr != NULL)
    {
        nextPtr = currPtr->next;
        currPtr->next = prevPtr;
        prevPtr = currPtr;
        currPtr = nextPtr;
    }
    return prevPtr;
}

Node* reverseRecursive(Node* &head)
{
    if(head==NULL || head->next==NULL)
    {
        return head;
    }
    Node* newHead = reverseRecursive(head->next);
    head->next->next = head;
    head->next = NULL;
    
    return newHead;
}

Node* reverseKNodes(Node* &head,int k)
{
    Node* prevPtr = NULL;
    Node* currPtr = head;
    Node* nextPtr;
    int count = 0;
    
    while(currPtr!=NULL && count<k)
    {
        nextPtr = currPtr->next;
        currPtr->next = prevPtr;
        prevPtr = currPtr;
        currPtr = nextPtr;
        count++;
    }
    if(nextPtr!=NULL)
    {
        head->next = reverseKNodes(nextPtr,k);
    }
    return prevPtr;
}

void deleteBegin(Node* &head)
{
    Node* temp = new Node;
    if(head == NULL)
    {
        cout<<"List is empty"<<endl;
    }
    temp = head;
    head = temp->next;
    free(temp);
}

int totalNodes(Node* &head)
{
    Node* temp = head;
    int count = 0;
    while(temp != NULL)
    {
        count++;
        temp = temp->next;
    }
    cout<<endl;
    return count;
}

Node* kAppend(Node* &head,int k)
{
    Node* newTail;
    Node* newHead;
    Node* tail=head;
    int l = totalNodes(head);
    int count = 1;
    while(tail->next!=NULL)
    {
        if(count==n-k)
        {
            newTail = tail;
        }
        if(count==n-k+1)
        {
            newHead=tail;
        }
        tail = tail->next;
        count++;
    }
    newTail->next = NULL;
    tail->next = head;
    return newHead;
}

void display(Node* &head)
{
    Node* temp = head;
    while(temp != NULL)
    {
        cout<<temp->data<<" ";
        temp = temp->next;
    }
    cout<<endl;
}

bool detectCycle(Node* &head)
{
    Node* fast = head;
    Node* slow = head;
    while(fast!=NULL && fast->next!=NULL)
    {
        slow = slow->next;
        fast = slow->next->next;
    }
    if(fast == slow)
    {
        return true;
    }
    return false;
}

void evenAfterOdd(Node* &head)
{
    Node* odd = head;
    Node* even = head->next;
    Node* evenStart = even;
    
    while(odd->next!=NULL && even->next!=NULL)
    {
        odd->next = even->next;
        odd = odd->next;
        even->next = odd->next;
        even = even->next;
    }
    odd->next = evenStart;
    if(odd->next!=NULL)
    {
        even->next = NULL;
    }
    return evenStart;
}

int intersection(Node* &head1,Node* &head2)
{
    int l1 = totalNodes(head1);
    int l2 = totalNodes(head2);
    int d=0;
    Node* ptr1,ptr2;
    if(l1>l2)
    {
        d = l1-l2;
        ptr1 = head1;
        ptr2 = head2;
    }
    else
    {
        d = l2-l1;
        ptr1 = head2;
        ptr2 = head1;
    }
    while(d)
    {
        ptr1 = ptr1->next;
        if(ptr1==NULL)
        {
            return NULL;
        }
        d--;
    }
    while(ptr1!=NULL && ptr2!=NULL)
    {
        if(ptr1==ptr2)
        {
            return ptr1->data;
        }
        ptr1 = ptr1->next;
        ptr2 = ptr2->next;
    }
    return -1;
}

int main()
{
    int choice,val,pos;
    Node* head = NULL;
    while(choice != 6)
    {
        cout<<"1. Insert at Beginning"<<endl;
        cout<<"2. Insert at any position"<<endl;
        cout<<"3. Delete at Beginning"<<endl;
        cout<<"4. Display"<<endl;
        cout<<"5. Reverse Linked List"<<endl;
        cout<<"6. EXIT"<<endl;
        cout<<"Enter choice: ";
        cin>>choice;
        switch(choice)
        {
            case 1:
            cout<<"Enter the value to be inserted: ";
            cin>>val;
            beginInsert(head,val);
            break;
            
            case 2:
            insertAtAnyPosition(head,val,pos);
            break;
            
            case 3:
            deleteBegin(head);
            break;
            
            case 4:
            display(head);
            break;
            
            case 5:
            Node* newHead = reverseRecursive(head);
            display(newHead);
            break;
        }
    }
}
