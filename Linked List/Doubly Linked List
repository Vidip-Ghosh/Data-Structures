#include <iostream>
using namespace std;

class Node{
    public:
    int data;
    Node* prev;
    Node* next;
    
    Node(int data)
    {
        this->data = data;
        this->prev = NULL;
        this->next = NULL;
    }
    
    ~Node()
    {
        int val = this->data;
        if(next != NULL)
        {
            delete next;
            next =  NULL;
        }
        cout<<"Memory free for Node with data: "<<val<<endl;
    }
};

void insertAtHead(Node* &tail,Node* &head,int data)
{
    if(head == NULL)
    {
        Node* temp = new Node(data);
        head = temp;
        tail = temp;
    }
    else
    {
        Node* temp = new Node(data);
        temp->next = head;
        head->prev = temp;
        head = temp;
    }
}

void insertAtTail(Node* &tail,Node* &head,int data)
{
    if(tail == NULL)
    {
        Node* temp = new Node(data);
        tail = temp;
        head = temp;
    }
    Node* temp = new Node(data);
    tail->next = temp;
    temp->prev = tail;
    tail = temp;
}

void insertAtPosition(Node* &tail,Node* &head,int position,int data)
{
    //inserting At head
    if(position==1)
    {
        insertAtHead(tail,head,data);
        return;
    }
    Node* temp = head;
    int cnt = 1;
    
    while(cnt < position-1)
    {
        temp = temp->next;
        cnt++;
    }
    
    //inserting At Tail
    if(temp->next == NULL)
    {
        insertAtTail(tail,head,data);
        return;
    }
    
    //creating a node for d
    Node* nodeToInsert = new Node(data);
    
    nodeToInsert->next = temp->next;
    temp->next->prev = nodeToInsert;
    temp->next = nodeToInsert;
    // nodeToInsert->next = temp->next;
    nodeToInsert->prev = temp;    
}

void deleteNode(int position,Node* &head)
{
    //deleting first node 
    if(position == 1)
    {
        Node* temp = head;
        temp->next->prev = NULL;
        head = temp->next;
        temp->next = NULL;
        delete temp;
    }
    else
    {
        //delete at middle position
        Node* curr = head;
        Node* prev = NULL;
        int cnt = 1;
        
        while(cnt < position)
        {
            prev = curr;
            curr = curr->next;
            cnt++;
        }
        curr->prev = NULL;
        prev->next = curr->next;
        curr->next = NULL;
        delete curr;
    }
}

void print(Node* head)
{
    Node* temp = head;
    while(temp!=NULL)
    {
        cout<<temp->data<<" ";
        temp = temp->next;
    }
    cout<<endl;
}

int getLength(Node* head)
{
    int len = 0;
    Node* temp = head;
    while(temp!=NULL)
    {
        len++;
        temp = temp->next;
    }
    return len;
}

int main()
{
    // Node* temp = new Node(10);
    // Node* head = temp;
    // Node* tail = temp;
    
    Node* head = NULL;
    Node* tail = NULL;
    print(head);
    
    cout<<getLength(head)<<endl;
    
    insertAtHead(tail,head,11);
    print(head);
    
    cout<<"head: "<<head->data<<endl;
    cout<<"tail: "<<tail->data<<endl;
    
    insertAtHead(tail,head,12);
    print(head);
    
    cout<<"head: "<<head->data<<endl;
    cout<<"tail: "<<tail->data<<endl;
    
    insertAtTail(tail,head,13);
    print(head);
    
    cout<<"head: "<<head->data<<endl;
    cout<<"tail: "<<tail->data<<endl;
    
    insertAtPosition(tail,head,2,100);
    print(head);
    
    cout<<"head: "<<head->data<<endl;
    cout<<"tail: "<<tail->data<<endl;
    
    deleteNode(4,head);
    print(head);
    
    cout<<"head: "<<head->data<<endl;
    cout<<"tail: "<<tail->data<<endl;
}
