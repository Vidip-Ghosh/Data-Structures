/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    stack<int> addListToValue(ListNode* list)
    {
        stack<int> st;
        while(list!=nullptr)
        {
            st.push(list->val);
            list=list->next;
        }
        return st;
    }
    ListNode* stackApp(ListNode* l1,ListNode* l2)
    {
        stack<int> s1=addListToValue(l1);
        stack<int> s2=addListToValue(l2);
        ListNode* head=nullptr;
        int carry=0;
        while(!s1.empty() || !s2.empty() || carry!=0)
        {
            int sum=carry;
            if(!s1.empty())
            {
                sum+=s1.top();
                s1.pop();
            }
            if(!s2.empty())
            {
                sum+=s2.top();
                s2.pop();
            }
            ListNode* node=new ListNode(sum%10);
            node->next=head;
            head=node;
            carry=sum/10;
        }
        return head;
    }
    ListNode* reverse(ListNode* head) {
        ListNode* newHead=nullptr;
        while(head!=nullptr)
        {
            ListNode* next=head->next;
            head->next=newHead;
            newHead=head;
            head=next;
        }
        return newHead;
    }
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        ListNode* p=reverse(l1);
        ListNode* q=reverse(l2);
        ListNode* dummy=new ListNode();
        ListNode* temp=dummy;
        int carry=0;
        /*Method-2: Reversing the list*/
        while(p!=nullptr || q!=nullptr || carry)
        {
            int sum=0;
            if(p!=nullptr)
            {
                sum+=(p->val);
                p=p->next;
            }
            if(q!=nullptr)
            {
                sum+=(q->val);
                q=q->next;
            }
            sum+=carry;
            carry=sum/10;
            ListNode* node=new ListNode(sum%10);
            temp->next=node;
            temp=temp->next;
        }
        
        return reverse(dummy->next);
        
        /*Method-2: Using Stack*/
        return stackApp(l1,l2);
    }
};
