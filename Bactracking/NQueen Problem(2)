#include<iostream>
using namespace std;

void printBoard(int n,int board[][20])
{
    for(int i=0;i<n;i++)
    {
        for(int j=0;j<n;j++)
        {
            cout<<board[i][j]<<" ";
        }
        cout<<endl;
    }
    cout<<endl;
}
bool canPlace(int board[][20],int n,int x,int y)
{
    for(int k=0;k<x;k++)
    {
        //COLUMN
        if(board[k][y]==1)
        {
            return false;
        }
    }
    //LEFT DIAGONAL
    int i = x;
    int j = y;
    while(i>=0 && j>=0)
    {
        if(board[i][j]==1)  //QUEEN IS PRESENT
        {
            return false;
        }
        i--;j--;
    }
    //RIGHT DIAGONAL
    i = x;
    j = y;
    while(i>=0 && j<n)
    {
        if(board[i][j]==1)  
        {
            return false;
        }
        i--;j++;
    }
    return true;    //Couldn't find the queen in the COLUMN (LEFT and RIGHT DIAGONAL)
}
int solveNQueen(int n,int board[][20],int i)
{
    //base case
    if(i==n)
    {
        printBoard(n,board);
        return 1;
    }
    
    //rec case->Try placing queen in every row 
    int ways=0;
    for(int j=0;j<n;j++)
    {
        if(canPlace(board,n,i,j))
        {
            board[i][j] = 1;
            ways += solveNQueen(n,board,i+1);
            //backtrack
            board[i][j] = 0;
        }
    }
    return ways;
}

int main()
{
    int board[20][20] = {0};
    int n;
    cin>>n;
    cout<<"Ways \n"<<solveNQueen(n,board,0);
}
