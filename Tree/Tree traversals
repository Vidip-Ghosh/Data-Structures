#include <iostream>
#include<queue>
using namespace std;

class Node
{
    public:
        int data;
        Node* left;
        Node* right;
        
    Node(int d)
    {
        this->data = d;
        this->right = NULL;
        this->left = NULL;
    }
};

Node* buildTree(Node* root)
{
    int data;
    cout<<"ENter the data: "<<endl;
    cin>>data;
    
    root = new Node(data);
    if(data == -1)
    {
        return NULL;
    }
    
    cout<<"Enter data for inserting in left of: "<<data<<endl;
    root->left = buildTree(root->left);
    
    cout<<"Enter data for inserting in right of: "<<data<<endl;
    root->right = buildTree(root->right);
    
    return root;
}

void levelOrderTraversal(Node* root)
{
    queue<Node*> q;
    q.push(root);
    q.push(NULL);
    while(!q.empty())
    {
        Node* temp = q.front();
        q.pop();
        
        if(temp == NULL)    //Level order gets completed
        {
            cout<<endl;
            if(!q.empty())  //Queue still has some child nodes
            {
                q.push(NULL);
            }
        }
        else
        {
            cout<<  temp->data  <<" ";
            if(temp->left)
            {
                q.push(temp->left);
            }
            if(temp->right)
            {
                q.push(temp->right);
            }
        }
    }
}

void inorder(Node* root)
{
    if(root == NULL)  //LNR
    {
        return;
    }
    inorder(root->left);
    cout<<  root->data <<" ";
    inorder(root->right);
}

void preorder(Node* root)
{
    if(root == NULL)   //NLR
    {
        return;
    }
    cout<< root->data <<" ";
    preorder(root->left);
    preorder(root->right);
}

void postorder(Node* root)
{
    if(root == NULL)    //LRN
    {
        return;
    }
    postorder(root->left);
    postorder(root->right);
    cout<< root->data <<" ";
}

void buildFromLevelOrder(Node* root)
{
    queue<Node*> q;
    int data;
    cout<<"Enter data for root: "<<endl;
    cin>>data;
    root = new Node(data);
    q.push(root);
    
    while(!q.empty())
    {
        Node* temp = q.front();
        q.pop();
        
        cout<<"Enter left Node for: "<<temp->data<<endl;
        int leftData;
        cin>>leftData;
        
        if(leftData != -1)
        {
            temp->left = new Node(leftData);
            q.push(temp->left);
        }
        
        cout<<"Enter right Node for: "<<temp->data<<endl;
        int rightData;
        cin>>rightData;
        
        if(rightData != -1)
        {
            temp->right = new Node(rightData);
            q.push(temp->right);
        }
    }
}

int main()
{
    Node* root = NULL;
    buildFromLevelOrder(root);
    levelOrderTraversal(root);
    /*root = buildTree(root); //creating a tree 
    
    cout<<"Printing the Level Order Traversal"<<endl;
    levelOrderTraversal(root); //level order traversal 
    
    cout << "Inorder traversal is: "<<endl;
    inorder(root);*/
    
    //1 3 5 7 11 17 -1 -1 -1 -1 -1 -1 -1
}
